//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.0
//     from Assets/Sources/App/Infrastructure/Implementation/Services/Inputs/InputControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

namespace Sources.App.Infrastructure.Implementation.Services.Inputs
{
    public partial class @InputControl: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControl"",
    ""maps"": [
        {
            ""name"": ""BasicMap"",
            ""id"": ""d92eedc8-bcd4-4a37-b6e1-72dad46e9fe4"",
            ""actions"": [
                {
                    ""name"": ""Direction"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5bc955cc-b926-49cb-95d5-09d97830e1bd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""PassThrough"",
                    ""id"": ""13470012-9af4-41dc-8569-177210eb8c1f"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f731bf9-bc23-47e8-83f9-9b3f0e333cbe"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99bdff78-5855-45cb-87d0-2ecab7d19924"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Control Scheme"",
            ""bindingGroup"": ""Control Scheme"",
            ""devices"": []
        }
    ]
}");
            // BasicMap
            m_BasicMap = asset.FindActionMap("BasicMap", throwIfNotFound: true);
            m_BasicMap_Direction = m_BasicMap.FindAction("Direction", throwIfNotFound: true);
            m_BasicMap_Select = m_BasicMap.FindAction("Select", throwIfNotFound: true);
        }

        ~@InputControl()
        {
            Debug.Assert(!m_BasicMap.enabled, "This will cause a leak and performance issues, InputControl.BasicMap.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // BasicMap
        private readonly InputActionMap m_BasicMap;
        private List<IBasicMapActions> m_BasicMapActionsCallbackInterfaces = new List<IBasicMapActions>();
        private readonly InputAction m_BasicMap_Direction;
        private readonly InputAction m_BasicMap_Select;
        public struct BasicMapActions
        {
            private @InputControl m_Wrapper;
            public BasicMapActions(@InputControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @Direction => m_Wrapper.m_BasicMap_Direction;
            public InputAction @Select => m_Wrapper.m_BasicMap_Select;
            public InputActionMap Get() { return m_Wrapper.m_BasicMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BasicMapActions set) { return set.Get(); }
            public void AddCallbacks(IBasicMapActions instance)
            {
                if (instance == null || m_Wrapper.m_BasicMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BasicMapActionsCallbackInterfaces.Add(instance);
                @Direction.started += instance.OnDirection;
                @Direction.performed += instance.OnDirection;
                @Direction.canceled += instance.OnDirection;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }

            private void UnregisterCallbacks(IBasicMapActions instance)
            {
                @Direction.started -= instance.OnDirection;
                @Direction.performed -= instance.OnDirection;
                @Direction.canceled -= instance.OnDirection;
                @Select.started -= instance.OnSelect;
                @Select.performed -= instance.OnSelect;
                @Select.canceled -= instance.OnSelect;
            }

            public void RemoveCallbacks(IBasicMapActions instance)
            {
                if (m_Wrapper.m_BasicMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBasicMapActions instance)
            {
                foreach (var item in m_Wrapper.m_BasicMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BasicMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BasicMapActions @BasicMap => new BasicMapActions(this);
        private int m_ControlSchemeSchemeIndex = -1;
        public InputControlScheme ControlSchemeScheme
        {
            get
            {
                if (m_ControlSchemeSchemeIndex == -1) m_ControlSchemeSchemeIndex = asset.FindControlSchemeIndex("Control Scheme");
                return asset.controlSchemes[m_ControlSchemeSchemeIndex];
            }
        }
        public interface IBasicMapActions
        {
            void OnDirection(InputAction.CallbackContext context);
            void OnSelect(InputAction.CallbackContext context);
        }
    }
}
